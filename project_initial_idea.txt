Описание первоначального замысла "личной базы знаний". *

    * Черновое название неверно отражает суть. "Менеджер личных данных"? Как калька с "personal data/information manager".


Предполагаемое время для прочтения: ~5 мин. **

    ** (~275/m, from mozilla firefox reader mode time estimate).


Преамбула.
    1. Чукча не писатель.
    2. Больше для себя, чтобы наконец-то попытаться облечь в слова туманные образы.
    3. Часть текста наверняка окажется наивной/неверной/бредовой.


Содержание:
    1. Пример одного из ожидаемых результатов.
    2. Цели и ожидания.
    3. Определение "личных данных" в контексте.
    4. Ожидаемые возможности.
    5. Отличия от CMS.
    6. Ограничения.
    7. Требования.
    8. Дополнительные требования.
    9. Список извлекаемых (дополнительных) данных и метаданных.
    10. Сложность реализации.
    11. Похожее ПО(self-hosted).
    12. Собственный пример источников и типов данных.
    13. Рандомные заметки по теме.


1. Пример одного из ожидаемых результатов.

    Представим, что я хочу узнать, когда, как и за сколько я оказался на курсах learn.python8.
    Ввожу в поисковой строке приложения запрос 'python'.
    Выводится результат в виде таблицы с полями ДАТА, ИСТОЧНИК, СТРОКА_СО_ВХОЖДЕНИЕМ, ССЫЛКА_НА_ФАЙЛ(кликните для отображения). ***
    Искомое слово в выводе помечено жирным шрифтом(<b></b>):

08.08.2017  (scripts/work/logbeat-wrapper.ps1)  # Мучался с отправкой логов из XX в ELK. Logbeat не может с таким форматом работать. Решил кривым способом в        [Click to view/edit file]
                                                 виде powershell скрипта. Нормальные люди решают это своим beat'ом на <b>python</b>. ...
12.08.2017  (TODO)                              +study @home :low-priority: надо бы выучить <b>python</b>
17.09.2017  (email/super.user@gmail.com)        From: Packt <contact@packtpub.com> ... Thank you for downloading ebook Learn <b>Python</b> by Fabrizio Romano       [Click to view message]
23.09.2017  (scripts/.../ch1/hello_world.py)    #!/usr/bin/env <b>python</b>                                                                                        [Click to view/edit file]
14.10.2017  (notes)                             Без нормальной практики и множества примеров в <b>python</b> не получается :-(
11.01.2018  (email/work.email@company.ru)       From: Иванов Иван ... Го учиться!  =)) <b>https://learn.python.ru/</b>                                              [Click to view message]
13.01.2018  (whatsapp)                          To: ivanov_ivan ... Похоже, только я пойду с тобой. Давай завтра на работе зарегаемся? Я про <b>python</b>.
14.01.2018  (sms)                               From: VISA Авторизация: VISA (RUR) N:*1234; SUM: -20000 RUR; CLOUD*TIMEPAD*LEARN<b>PYTHON</b> 13:31 (UTC +3)
14.01.2018  (gnucash)                           2018.01.14 13:31 learn.<b>python</b> courses 2018_02_17 (assets:rub:card:visa:-20000, expenses:rub:courses:+20000)
14.01.2018  (email/super.user@gmail.com)        From: Learn <b>Python</b> Team ... Добро пожаловать на курс Learn <b>Python</b>! ...                                [Click to view message]
11.02.2018  (email/super.user@gmail.com)        From: Learn <b>Python</b>. Team ... Первое задание ...                                                              [Click to view message]
15.02.2018  (slack)                             Joined workspace learn<b>python</b>8.
16.02.2018  (whatsapp)                          From: ivanon_ivan ... Не забудь, завтра на курсы <b>python</b>. Ты ноут нашёл?
...

    Т.е. быстро и наглядно виден путь от первой встречи с python и желания в нём разобраться до самостоятельных попыток и, в конце концов, регистрации на курсе.

    *** С моношрифтом текст выше выглядит стройной табличкой. При использовании другого шрифта таблица "поедет".


2. Цели и ожидания.

    2.1 Глобальные цели:
        2.1.1 Сделать удобнее и быстрее доступ к своим данным.
        2.1.2 Сделать возможным быстрый поиск сразу по всем своим данным.
    2.2 Дополнительные цели:
        2.2.1 Больше порядка.
        2.2.2 Консолидация своих данных, чтобы всегда иметь резервную копию, не зависящую ни от чего.
    2.3 Ожидаемый результат:
        2.3.1 Улучшение качества жизни, типа как от эксплуатации TODO(оздоровление дофаминовой системы, уменьшение стресса :-) ).


3. Определение "личных данных" в контексте.

    Далее по тексту под личными данными (персональными данными, приватной информацией и т.д.) понимается следующее:
        Любая информация в цифровом формате хранения данных созданная пользователем или с его участием,
            или предназначенная для него, или имеющая к нему отношение, или интересующая пользователя. ****
        Морально-этические соображения в этом определении не учитываются.

    Примеры:
        SMS, история звонков, записи телефонных разговоров, электронные письма, архив фотографий, тексты, заметки, TODO, записи о расходах и доходах,
            контактная информация (телефонная книга), библио- и фильмотека, сообщения в мессенджерах, записи в социальных сетях и на форумах, закладки в браузерах,
            скачанные странички с нужным и могущим пропасть контентом и т.д. и т.п.

    **** Как оказалось, почти повторил определение на википедии: https://en.m.wikipedia.org/wiki/Personal_information_management


4. Ожидаемые возможности.

    4.1 Сбор личных данных из разных источников для хранения и обработки.
    4.2 Обработка для извлечения метаданных и дополнительных данных.
    4.3 Поиск и предоставление данных.
    4.4 Модификация (ограниченная, только для маленькой части данных).


5. Отличия от CMS.
    В (4.) проглядывает обычная CMS, но есть своя специфика:

    4.1 Большая часть данных в read-only (не имеет смысла пытаться редактировать тут смс или email).
    4.2 Тэги обычно задаются при создании контента, а тут большая часть контента уже где-то создана и подгружается автоматически.
            Т.е. тэги должны расставляться автоматически на основании источника данных/даты и т.д.
    4.3 Приложение однопользовательское(см. "6. Ограничения.").


6. Ограничения.

    6.1 Из-за специфики данных однопользовательское и self-hosted в контролируемой среде, т.е. vpn и т.д. Никакого публичного доступа.


7. Требования/пожелания к приложению.

    7.1 Должно быть free open-source и быть создано (по-возможности) с помощью free open-source решений.
    7.2 Не должно вносить изменения в пользование вышележащими сервисами.
            Пример: Email. Есть приложение или нет, не должно быть разницы. Как использовался, к примеру, почтовый клиент, так и используется.
    7.3 File-based, как наиболее универсальный подход. БД исключительно для индексирования\кэширования(?).
        7.3.1 Если производит какие-то метаданные, которые потом не получится восстановить, то должны быть выгружены в файловую систему.
                Пример: время добавления контакта в список контактов на gmail.
    7.4 Linux или Cross-platform.
    7.5 Automate it! Минимум действий со стороны пользователя. Т.е. то же тэгирование должно быть по-возможности автоматизированным.


8. Дополнительные требования, соображения.

    8.1 Отзывчивость получше. Чем медленее - тем неприятнее пользоваться. (Redis persistence / redis + mongo?, elasticsearch ?)
    8.2 Модульность. Возможно получится более простое и гибкое приложение. Раскидать сервер приложения, клиенты, поставщиков информации на разные модули, общающиеся через API.
    8.3 Разные клиенты. На мобиле веб, на ПК может в будущем терминальное\ГУИ.
    8.4 Использование RDBMS кажется излишним для этой задачи.
    8.5 Git для отражения изменений (git based?), типа как в gitit/wiki.js etc.
    8.6 Может имеет смысл не изобретать колесо, и некоторые задачи кидать в фрэймах на созданное для этих задач ПО. Типа:
            - редактирование текстов в gitit/wiki.js,
            - демонстрацию фото и видео в nextcloud,
            - скачивание страничек с помощью wallabag.
    8.7 Поставщика информации сделать 2-уровневым, т.е. информация при импорте будет вначале высасываться специфичными для источника функциями (imap, fs, google api etc.),
            потом обрабатываться специфичными для типа данных (MIME ?) и уже передаваться в приложение.
    (8.8 message queue between data providers and server?)
    (8.9 android data provider would be win)


9. Список извлекаемых (дополнительных) данных и метаданных.

    9.1 Очевидно сами данные и метаданные.
            Пример: Email. Есть десятки заголовков (метаданные), содержимое(данные),
                        вложения (по ним тоже можно собирать метаданные, время создания\формат и т.д., выдирать из них данные и т.д.).
    9.2 Дополнительные метаданные.
            Примеры:
                1. Фото. можно автоматически exif извлекать. Место, время и т.д. Потом при поиске это учитывать.
                2. Время создания или изменения контакта на gmail(android). Я, как пользователь, этого не вижу.
                    При постоянной подкачке данных можно будет это увидеть и записать (возможно только для свежесозданных контактов).
    9.3 Дополнительные данные:
            Примеры:
                1. На фотографиях\pdf распознавать текст при помощи tesseract-ocr (или аналогов).
                2. Переводить в текст записи звонков при помощи sphinx (или аналогов).


10. Сложность реализации.

    Не вижу каких-то особых сложностей. Библиотеки подо всё есть.
    Самая большая сложность в изобилии типов и источников данных, то есть потребуется много времени на созднание поставщиков данных.

11. Похожее ПО(self-hosted).

    11.1 Tagspaces (self-hosted open-source personal data-manager like Evernote).
    11.2 Gitit, wiki.js (git based wiki)
    11.3 Nextcloud.
    11.4 Wallabag (read-it-later web page ripper).
    11.5 Read the docs:
            Очень похоже на то, что замыслено, но без data-providers. Работает с уже предоставленным контентом, расположенным в fs/vcs.
            Используемые технологии: Python, postgresql, redis, elasticsearch, django.


12. Собственный пример источников и типов данных.

    12.1 Окружение: Пара мобильных телефонов, компьютеров:
        SMS, история звонков: выгружается через приложение на Gmail.
        Контакты синхронизируются с ним же.
        Записи телефонных звонков, фотографии, скачанные файлы, скрипты, записи и документы синхронизируются между всеми устройствами Syncthing (аналог BittorrentSync).
        Мессенджеры viber, whatsapp, telegram так же через Syncthing.
        Рабочий и личные почтовые ящики.
        TODO: todo.txt (simpletask cloudless на мобилах), синхронизируется Syncthing.
        Финансы: gnucash, сихронизируется Syncthing.
        На компьютере есть архив с фотографиями, видео, документами.
        Всё вышеперечисленное для резервного копирования регулярно отправляется на хранилище через zfs snapshot + send / receive.
        Есть ещё к примеру беговой компьютер, выгружающий информацию на tomtom. Получить эту информацию оттуда и иметь копию тоже хочется.

    12.2 Примеры запросов(не самые лучшие).
         Иногда приходится искать что-то во всём этом обилии разных программ.
            1. Попросил брат полить цветы. Приехал к нему, понадобился вай-фай. Помню, что пароль мне говорили когда-то давно.
                Могли устно, могли в смс, вайбере, ватсаппе. Через 10 минут поисков нашёл в вайбере.
            2. Потребовалось клонирование системы. Уже занимался этим, оставил заметку со специфичными параметрами rsync, но не помню где.
                Нашёл бы заметку - сэкономил бы 20 минут чтения мануалов. Потом уже нашёл свою давнюю заметку в файле с неочевидным названием.

    12.3 Цель: Хочется одновременного доступа\поиска до всей имеющейся информации для ускорения, для расширения возможностей.


13. Рандомные заметки по теме.

    13.1 Может все мессенджеры объединить с помощью pidgin/libpurple и уже из него тянуть данные?
    13.2 Отличный ресурс со списком похожего/могущего пригодиться ПО: https://github.com/Kickball/awesome-selfhosted/blob/master/README.md
