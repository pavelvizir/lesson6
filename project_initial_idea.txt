Описание первоначального замысла "личной базы знаний". *

* Черновое название неверно отражает суть. "Менеджер личных данных"? Как калька с "personal data manager".

TODO:
1. Оформить более-менее внятно.

Преамбула.
1. Чукча не писатель.
2. Больше для себя, чтобы наконец-то попытаться облечь в слова туманные образы приложения.
3. Будет много бреда.

Disambiguation:
Далее по тексту под личными данными (персональными данными, приватной информацией и т.д.) понимается следующее:
Любая информация в цифровом формате хранения данных до которой можно дотянуться и созданная пользователем или с его участием, или предназначенная для него, или имеющая к нему отношение, или интересующая пользователя.
Морально-этические соображения в этом определении не учитываются.
Примеры:
SMS, история звонков, записи телефонных разговоров, электронные письма, архив фотографий, тексты, заметки, TODO, записи о расходах и доходах, контактная информация (телефонная книга), библио- и фильмотека, сообщения в мессенджерах, записи в социальных сетях и на форумах, закладки в браузерах, скачанные странички с нужным и могущим пропасть контентом и т.д. и т.п.

Краткая версия.
Приложение должно позволить пользователю управлять личными данными, т.е. осуществлять следующие операции:
1. Сбор данных из разных источников для хранения и обработки.
2. Обработка для извлечения метаданных и дополнительных данных.
3. Поиск.
4. Предоставление данных.
5. Модификация (ограниченная, только для маленькой части данных).
Т.е. получается специфичная CMS.

Требования/пожелания к приложению:
1. Должно быть free open-source и быть создано (по-возможности) с помощью free open-source решений.
2. Не должно вносить изменения в пользование вышележащими сервисами (на примере email: есть приложение или нет, не должно быть разницы. Как использовался, к примеру, почтовый клиент, так и используется.)
3. File-based, как наиболее универсальный подход. БД исключительно для индексирования\кэширования(?). Если производит какие-то метаданные, которые потом не получится восстановить, то должны быть выгружены в файловую систему. Пример: время добавления контакта в список контактов на gmail.
4. Cross-platform.
5. Automate it! Минимум действий со стороны пользователя. Т.е. то же тэгирование должно быть по-возможности автоматизированным.

Ограничения:
1. Из-за специфики данных однопользовательское и self-hosted в контролируемой среде, т.е. vpn и т.д. Никакого публичного доступа.

Дополнительные соображения:
1. Отзывчивость получше. Чем медленее - тем неприятнее пользоваться. (Redis persistence / redis + mongo?)
2. Модульность. Возможно получится более простое и гибкое приложение.
3. Разные клиенты. На мобиле веб, на ПК терминальное\ГУИ.
4. Использование RDBMS кажется излишним для этой задачи.
5. Git для отражения изменений (git based?).

Похожее ПО:
1. Tagspaces (self-hosted open-source personal data-manager like Evernote).
2. Gitit.

Более развёрнуто:
Для начала пример возможного результата:

    Хочу узнать, когда, как и за сколько я оказался на курсах learn.python8.
    Ввожу в поисковой строке приложения запрос 'python'.
    Выводится результат в виде таблицы с полями ДАТА, ИСТОЧНИК, СТРОКА_СО_ВХОЖДЕНИЕМ, ССЫЛКА_НА_ФАЙЛ.
    Искомое слово в выводе помечено жирным шрифтом:

08.08.2017  (scripts/work/logbeat-wrapper.ps1)  # Мучался с отправкой логов из XX в ELK. Logbeat не может с таким форматом работать. Решил кривым способом в        [Click to view/edit file]
                                                 виде powershell скрипта. Нормальные люди решают это своим beat'ом на <b>python</b>. ...
12.08.2017  (TODO)                              +study @home :low-priority: надо бы выучить <b>python</b>
17.09.2017  (email/super.user@gmail.com)        From: Packt <contact@packtpub.com> ... Thank you for downloading ebook Learn <b>Python</b> by Fabrizio Romano       [Click to view message]
23.09.2017  (scripts/.../ch1/hello_world.py)    #!/usr/bin/env <b>python</b>                                                                                        [Click to view/edit file]
14.10.2017  (notes)                             Без нормальной практики и множества примеров в <b>python</b> не получается :-(
11.01.2018  (email/work.email@company.ru)       From: Иванов Иван ... Го учиться!  =)) <b>https://learn.python.ru/</b>                                              [Click to view message]
13.01.2018  (whatsapp)                          To: ivanov_ivan ... Похоже, только я пойду с тобой. Давай завтра на работе зарегаемся? Я про <b>python</b>.
14.01.2018  (sms)                               From: VISA Авторизация: VISA (RUR) N:*1234; SUM: -20000 RUR; CLOUD*TIMEPAD*LEARN<b>PYTHON</b> 13:31 (UTC +3)
14.01.2018  (gnucash)                           2018.01.14 13:31 learn.<b>python</b> courses 2018_02_17 (assets:rub:card:visa:-20000, expenses:rub:courses:+20000)
14.01.2018  (email/super.user@gmail.com)        From: Learn <b>Python</b> Team ... Добро пожаловать на курс Learn <b>Python</b>! ...                                [Click to view message]
11.02.2018  (email/super.user@gmail.com)        From: Learn <b>Python</b>. Team ... Первое задание ...                                                              [Click to view message]
15.02.2018  (slack)                             Joined workspace learn<b>python</b>8.
16.02.2018  (whatsapp)                          From: ivanon_ivan ... Не забудь, завтра на курсы <b>python</b>. Ты ноут нашёл?
...

    Т.е. быстро и наглядно виден путь от появления идеи до начала реализации.


Собственный пример:
Пара мобильных телефонов, компьютеров.
    SMS, история звонков: выгружается через приложение на Gmail.
    Контакты синхронизируются с ним же.
    Записи телефонных звонков, фотографии, скачанные файлы, скрипты, записи и документы синхронизируются между всеми устройствами Syncthing (аналог BittorrentSync).
    Мессенджеры viber, whatsapp, telegram так же через Syncthing.
    Рабочий и личные почтовые ящики.
    TODO: todo.txt (simpletask cloudless на мобилах), синхронизируется Syncthing.
    Финансы: gnucash, сихронизируется Syncthing.
    На компьютере есть архив с фотографиями, видео, документами.
    Всё вышеперечисленное для резервного копирования регулярно отправляется на хранилище через zfs send / receive.

Иногда приходится искать что-то во всём этом обилии разных программ.
Примеры(не самые лучшие):
    1. Попросил брат полить цветы. Приехал к нему, понадобился вай-фай. Помню, что пароль мне говорили когда-то давно. Могли устно, могли в смс, вайбере, ватсаппе. Через 10 минут поисков нашёл в вайбере...
    2. Потребовалось клонирование системы. Уже занимался этим, оставил заметку со специфичными параметрами rsync, но не помню где. Нашёл бы заметку - сэкономил бы 20 минут чтения мануалов. Потом уже нашёл свою давнюю заметку в файле с неочевидным названием.

Хочется одновременного доступа\поиска до всей имеющейся информации.
